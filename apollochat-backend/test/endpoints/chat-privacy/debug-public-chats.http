# @name debugPublicChats
# This file tests the publicChats query to debug why it returns an empty array

# ===== SECTION 1: Test publicChats query =====

# Test 1.1: Query public chats with Roy's token
# @name publicChatsDebug
POST http://localhost:3001/api/graphql
Content-Type: application/json
Cookie: Authentication=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODRjZTFkODJlNTViYTllODg1OTQxNWMiLCJlbWFpbCI6InJveUB0ZXN0LmNvbSIsInVzZXJuYW1lIjoicm95Iiwic3RhdHVzIjoiT0ZGTElORSIsImltYWdlVXJsIjoiaHR0cHM6Ly9hcG9sbG8tY2hhdC11c2Vycy10ZXN0LnMzLmFtYXpvbmF3cy5jb20vNjg0Y2UxZDgyZTU1YmE5ZTg4NTk0MTVjLmpwZyIsImlhdCI6MTc1MDE1NTg3MiwiZXhwIjoxNzUwMTkxODcyfQ._N4343gUzRxM2OlNZaFrRby4g-2EKXEsxaTNLdE9jxo

{
  "query": "query PublicChatsDebug { publicChats { _id name type creator { _id username } } }"
}

###

# Test 1.2: Query all chats (for comparison)
# @name allChatsDebug
POST http://localhost:3001/api/graphql
Content-Type: application/json
Cookie: Authentication=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODRjZTFkODJlNTViYTllODg1OTQxNWMiLCJlbWFpbCI6InJveUB0ZXN0LmNvbSIsInVzZXJuYW1lIjoicm95Iiwic3RhdHVzIjoiT0ZGTElORSIsImltYWdlVXJsIjoiaHR0cHM6Ly9hcG9sbG8tY2hhdC11c2Vycy10ZXN0LnMzLmFtYXpvbmF3cy5jb20vNjg0Y2UxZDgyZTU1YmE5ZTg4NTk0MTVjLmpwZyIsImlhdCI6MTc1MDE1NTg3MiwiZXhwIjoxNzUwMTkxODcyfQ._N4343gUzRxM2OlNZaFrRby4g-2EKXEsxaTNLdE9jxo

{
  "query": "query AllChatsDebug { chats(skip: 0, limit: 20) { _id name type } }"
}

###

# Test 1.3: Query specific public chat by ID
# @name specificPublicChatDebug
POST http://localhost:3001/api/graphql
Content-Type: application/json
Cookie: Authentication=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODRjZTFkODJlNTViYTllODg1OTQxNWMiLCJlbWFpbCI6InJveUB0ZXN0LmNvbSIsInVzZXJuYW1lIjoicm95Iiwic3RhdHVzIjoiT0ZGTElORSIsImltYWdlVXJsIjoiaHR0cHM6Ly9hcG9sbG8tY2hhdC11c2Vycy10ZXN0LnMzLmFtYXpvbmF3cy5jb20vNjg0Y2UxZDgyZTU1YmE5ZTg4NTk0MTVjLmpwZyIsImlhdCI6MTc1MDE1NTg3MiwiZXhwIjoxNzUwMTkxODcyfQ._N4343gUzRxM2OlNZaFrRby4g-2EKXEsxaTNLdE9jxo

{
  "query": "query SpecificChatDebug($chatId: String!) { chat(_id: $chatId) { _id name type creator { _id username } } }",
  "variables": {
    "chatId": "6851637f00dc3151b93070fd"
  }
}

###

# Test 1.4: Query with Aniket's token (creator of the public chat)
# @name publicChatsWithCreatorToken
POST http://localhost:3001/api/graphql
Content-Type: application/json
Cookie: Authentication=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODRjZTFiZDJlNTViYTllODg1OTQxNTkiLCJlbWFpbCI6ImFuaWtldEB0ZXN0LmNvbSIsInVzZXJuYW1lIjoiYW5pa2V0Iiwic3RhdHVzIjoiT0ZGTElORSIsImltYWdlVXJsIjoiaHR0cHM6Ly9hcG9sbG8tY2hhdC11c2Vycy10ZXN0LnMzLmFtYXpvbmF3cy5jb20vNjg0Y2UxYmQyZTU1YmE5ZTg4NTk0MTU5LmpwZyIsImlhdCI6MTc1MDE1NTg3MiwiZXhwIjoxNzUwMTkxODcyfQ.Yx_N-3WXZtQhV8kEiGt9U9-5w9FLEk9DnFj-TjN_1Wk

{
  "query": "query PublicChatsWithCreatorToken { publicChats { _id name type creator { _id username } } }"
}

###

# Test 1.5: Use the new debug endpoint
# @name debugPublicChatsEndpoint
POST http://localhost:3001/api/graphql
Content-Type: application/json
Cookie: Authentication=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODRjZTFkODJlNTViYTllODg1OTQxNWMiLCJlbWFpbCI6InJveUB0ZXN0LmNvbSIsInVzZXJuYW1lIjoicm95Iiwic3RhdHVzIjoiT0ZGTElORSIsImltYWdlVXJsIjoiaHR0cHM6Ly9hcG9sbG8tY2hhdC11c2Vycy10ZXN0LnMzLmFtYXpvbmF3cy5jb20vNjg0Y2UxZDgyZTU1YmE5ZTg4NTk0MTVjLmpwZyIsImlhdCI6MTc1MDE1NTg3MiwiZXhwIjoxNzUwMTkxODcyfQ._N4343gUzRxM2OlNZaFrRby4g-2EKXEsxaTNLdE9jxo

{
  "query": "query DebugPublicChatsEndpoint { debugPublicChats { _id name type creator { _id username } } }"
}

###

# Test 1.6: Direct MongoDB query to check public chats
# Run this in MongoDB shell:
# db.chats.find({type: {$in: ["public", "open"]}}).pretty()

###

# Instructions for debugging:
# 1. Add these debug logs to chats.service.ts in the findPublicChats method:
#
# // At the beginning of findPublicChats method
# this.logger.debug('Finding public chats');
# this.logger.debug(`Public filter: ${JSON.stringify(publicFilter)}`);
#
# // After the aggregation
# this.logger.debug(`Found ${chats.length} chats from aggregation`);
# for (const chat of chats) {
#   this.logger.debug(`Processing chat: ${String(chat._id)}, creator: ${chat.creator ? 'exists' : 'missing'}, creatorId: ${String(chat.creatorId || 'undefined')}`);
# }
#
# // At the end of the method
# this.logger.debug(`Returning ${processedChats.length} processed public chats`);
#
# 2. Run the server with debug logs enabled:
#    cd apollochat-backend
#    npm run start:debug
#
# 3. Send these requests and check the logs 